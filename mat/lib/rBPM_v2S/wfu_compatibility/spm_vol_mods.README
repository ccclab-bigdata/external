SPM99/SPM2/5 M mat compatibility


M is the SPM99 4x4
mat is the SPM2/5 4x4

SPM2 .mat files contain M and mat variable
SPM99 .mat files only contain M variable

In SPM99:
R/L flipping is defined in parameters for normalization (starting estimates)
Normalized images are written in neurologic
normalization does not generate a .mat

In SPM2/5:
R/L flipping is defined in defaults.analyze.flip
If there is a .mat with a mat variable, the analyze.flip is ignored
When there is no .mat, SPM2 looks to the analyze.flip to determine orientation
During normalization, the image is not flipped, and a .mat is not generated.  The only way SPM2/5 knows that this is normalized is because the image is written radiologic, and the analyze.flip is 1 flipping it back.
The pre-normalized image has a .mat associated with it (from the DICOM header) that tells it the orientation.  Note that this initial orientation is still dependent on the analyze.flip parameter.


To be compatible between formats:
All normalized images should have mat = M, regardless of SPM2/5/99
With SPM99 normalized images, mat = M (SPM99 writes neurologic)
with SPM2 normalized images, M = mat (note these are different, because SPM2 writes in original format - radiologic)
Prenormalized images should have M = diag([-1 1 1 1]) * mat

Our scheme in SPM2 is to have a wfu_is_normalized routine that determines:
1) is the file normalized
2) was it normalized in SPM99
If not normalized, it does nothing
If normalized, it computes the appropriate M, and mat depending on whether it was SPM2 or SPM99 normalization, and sets them equal to each other.

spm_vol calls wfu_spm_vol_ana
wfu_spm_vol_ana calls wfu_is_normalized
The V structure with the .mat variable is set through spm_vol (called by all routines in SPM to determine orientation)
We also modified spm_create_vol (which creates the analyze .hdr) to write a .mat with M and mat variables all the time so SPM2/5 normalized images will have their .mats




Spm_create_vol
Creates/updates .hdr
V already comes into this routine
It is not concerned with M from spm99
The flip analyze is entirely internal to spm2

Instead of call to wfu_is_normalized
Call spm_vol
.hdr is already written
Put wfu.m in V structure
Write .mat file with mat from V.mat and M from V.wfu_M

Modify wfu_spm_vol_ana
Return M in field V.wfu.M
Return normalized in V.wfu.normalized

Wfu_is_normalized
   if the V structure already has a wfu substructure field
   the routine should just set the output fields to 
      the V fields and return
      this will avoid recursive calls modifying the value of
       V.mat with every recursion.
If a filename alone comes in
	Should just call spm_vol
	Set fields, and return

Spm_vol_ana
Only modifies mat if it is spm99 normalized
Only modifies M if it is spm2/5 normalized
When normalized mat = M


For spm99:
No spm_create_vol routine exists (started with spm2)
spm_get_space99 is not modified from native spm_get_space
spm_vol99 is not modified from native spm_vol
spm99 is currently NOT forward compatible with spm2/5


For spm2:
spm_create_vol is modified from native
spm_get_space2 is modified from native (calls spm_vol)
spm_vol2 is modified from native spm_vol
modification make spm2 backward compatible with spm99, but not forward compatible with spm5


For spm5:

spm_create_vol5 is not modified from native spm_create_vol
spm_get_space5 is modified from native spm_get_space to check for spm99 files
spm_vol5 contains modification for spm99 compatibility:
	it detects spm99 files by looking for aux_file field to be filled with 'none' in private hdr
	it then calls wfu_is_normalized to check to see if it is a normalized
	it updates the values of V.mat, V.private.mat, and V.private.mat0 to reflect
	the correct mat transform for an spm99 normalized image
modifications make spm5 backward compatible with spm99, no effect on existing compatibility with spm2
Note that calls directly to nifti couldn't be modified because of private subdirectories

